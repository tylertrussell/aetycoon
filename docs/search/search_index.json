{
    "docs": [
        {
            "location": "/", 
            "text": "gae-catnado\n\n\nA collection of useful Google App Engine datastore properties and helpers.\n\n\nForked from \naetycoon\n\nwith additions and modifications.\n\n\nThis package is a work-in-progress.\n Most notably, the tests are incomplete.\n\n\nSetup\n\n\nInstall via \npip\n\n\npip install gae-catnado\n\n\n\n\nRequirements\n\n\nGoogle Cloud SDK\n.\n\n\nRunning tests\n\n\nIn order to run tests locally, you'll need to:\n\n\n\n\n\n\nset an environment variable \nAPPENGINE_SDK_DIR\n containing your Google App \nEngine SDK directory (which will end in \n/platform/google_appengine\n)\n\n\n\n\n\n\ncall \ncatnado.utils.environment.setup_cloud_sdk_paths\n during test startup\n\n\n\n\n\n\nThe provided \nconftest.py\n will perform required setup for the \npytest\n test runner.\n\n\nCats\n\n\nThey're pretty great.", 
            "title": "Home"
        }, 
        {
            "location": "/#gae-catnado", 
            "text": "A collection of useful Google App Engine datastore properties and helpers.  Forked from  aetycoon \nwith additions and modifications.  This package is a work-in-progress.  Most notably, the tests are incomplete.", 
            "title": "gae-catnado"
        }, 
        {
            "location": "/#setup", 
            "text": "Install via  pip  pip install gae-catnado", 
            "title": "Setup"
        }, 
        {
            "location": "/#requirements", 
            "text": "Google Cloud SDK .", 
            "title": "Requirements"
        }, 
        {
            "location": "/#running-tests", 
            "text": "In order to run tests locally, you'll need to:    set an environment variable  APPENGINE_SDK_DIR  containing your Google App \nEngine SDK directory (which will end in  /platform/google_appengine )    call  catnado.utils.environment.setup_cloud_sdk_paths  during test startup    The provided  conftest.py  will perform required setup for the  pytest  test runner.", 
            "title": "Running tests"
        }, 
        {
            "location": "/#cats", 
            "text": "They're pretty great.", 
            "title": "Cats"
        }, 
        {
            "location": "/docgen-api/catnado/", 
            "text": "", 
            "title": "__init__"
        }, 
        {
            "location": "/docgen-api/catnado.properties/", 
            "text": "", 
            "title": "__init__"
        }, 
        {
            "location": "/docgen-api/catnado.properties.array_property/", 
            "text": "Classes\n\n\nArrayProperty\n\n\nAn array property that is stored as a string.\n\n\ndefault_value\n\n\nmake_value_from_datastore\n\n\nvalidate\n\n\nget_value_for_datastore\n\n\nempty", 
            "title": "array_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.array_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.array_property/#arrayproperty", 
            "text": "An array property that is stored as a string.  default_value  make_value_from_datastore  validate  get_value_for_datastore  empty", 
            "title": "ArrayProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.choice_property/", 
            "text": "Classes\n\n\nChoiceProperty\n\n\nA property for efficiently storing choices made from a finite set.\n\n\nThis works by mapping each choice to an integer.  The choices must be hashable\n  (so that they can be efficiently mapped back to their corresponding index).\n\n\nc2i\n\n\nConverts a choice to its datastore representation.\n\n\nget_choices\n\n\nGets a list of values which may be assigned to this property.\n\n\nmake_value_from_datastore\n\n\nget_value_for_datastore", 
            "title": "choice_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.choice_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.choice_property/#choiceproperty", 
            "text": "A property for efficiently storing choices made from a finite set.  This works by mapping each choice to an integer.  The choices must be hashable\n  (so that they can be efficiently mapped back to their corresponding index).  c2i  Converts a choice to its datastore representation.  get_choices  Gets a list of values which may be assigned to this property.  make_value_from_datastore  get_value_for_datastore", 
            "title": "ChoiceProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.compressed_property/", 
            "text": "Classes\n\n\nCompressedProperty\n\n\nAn unindexed, compressed property.\n\n\nCompressedTextProperty and CompressedBlobProperty derive from this class.\n\n\nmake_value_from_datastore\n\n\nvalue_to_str\n\n\nReturns the value stored by this property encoded as a (byte) string,\n    or None if value is None.  This string will be stored in the datastore.\n    By default, returns the value unchanged.\n\n\nget_value_for_datastore\n\n\nCompressedTextProperty\n\n\nA string that will be stored in a compressed form (encoded as UTF-8).\n\n\nvalue_to_str\n\n\nCompressedBlobProperty\n\n\nA byte string that will be stored in a compressed form.", 
            "title": "compressed_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.compressed_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.compressed_property/#compressedproperty", 
            "text": "An unindexed, compressed property.  CompressedTextProperty and CompressedBlobProperty derive from this class.  make_value_from_datastore  value_to_str  Returns the value stored by this property encoded as a (byte) string,\n    or None if value is None.  This string will be stored in the datastore.\n    By default, returns the value unchanged.  get_value_for_datastore", 
            "title": "CompressedProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.compressed_property/#compressedtextproperty", 
            "text": "A string that will be stored in a compressed form (encoded as UTF-8).  value_to_str", 
            "title": "CompressedTextProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.compressed_property/#compressedblobproperty", 
            "text": "A byte string that will be stored in a compressed form.", 
            "title": "CompressedBlobProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.decimal_property/", 
            "text": "Classes\n\n\nDecimalProperty\n\n\nProperty for storing Decimal types.\n\n\nmake_value_from_datastore\n\n\nvalidate\n\n\nget_value_for_datastore", 
            "title": "decimal_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.decimal_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.decimal_property/#decimalproperty", 
            "text": "Property for storing Decimal types.  make_value_from_datastore  validate  get_value_for_datastore", 
            "title": "DecimalProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.derived_property/", 
            "text": "Functions\n\n\nDerivedProperty\n\n\nImplements a 'derived' datastore property.\n\n\nDerived properties are not set directly, but are instead generated by a\n  function when required. They are useful to provide fields in the datastore\n  that can be used for filtering or sorting in ways that are not otherwise\n  possible with unmodified data - for example, filtering by the length of a\n  BlobProperty, or case insensitive matching by querying the lower cased version\n  of a string.\n\n\nDerivedProperty can be declared as a regular property, passing a function as\n  the first argument, or it can be used as a decorator for the function that\n  does the calculation, either with or without arguments.\n\n\nClasses\n\n\nLengthProperty\n\n\nA convenience class for recording the length of another field\n\n\nLowerCaseProperty\n\n\nA convenience class for generating lower-cased fields for filtering.", 
            "title": "derived_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.derived_property/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/docgen-api/catnado.properties.derived_property/#derivedproperty", 
            "text": "Implements a 'derived' datastore property.  Derived properties are not set directly, but are instead generated by a\n  function when required. They are useful to provide fields in the datastore\n  that can be used for filtering or sorting in ways that are not otherwise\n  possible with unmodified data - for example, filtering by the length of a\n  BlobProperty, or case insensitive matching by querying the lower cased version\n  of a string.  DerivedProperty can be declared as a regular property, passing a function as\n  the first argument, or it can be used as a decorator for the function that\n  does the calculation, either with or without arguments.", 
            "title": "DerivedProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.derived_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.derived_property/#lengthproperty", 
            "text": "A convenience class for recording the length of another field", 
            "title": "LengthProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.derived_property/#lowercaseproperty", 
            "text": "A convenience class for generating lower-cased fields for filtering.", 
            "title": "LowerCaseProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.domain_property/", 
            "text": "Classes\n\n\nCurrentDomainProperty\n\n\nA property that restricts access to the current domain.\n\n\nget_value_for_datastore\n\n\nInvalidDomainError\n\n\nRaised when something attempts to access data belonging to another domain.", 
            "title": "domain_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.domain_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.domain_property/#currentdomainproperty", 
            "text": "A property that restricts access to the current domain.  get_value_for_datastore", 
            "title": "CurrentDomainProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.domain_property/#invaliddomainerror", 
            "text": "Raised when something attempts to access data belonging to another domain.", 
            "title": "InvalidDomainError"
        }, 
        {
            "location": "/docgen-api/catnado.properties.immutabe_property/", 
            "text": "Classes\n\n\nImmutableMixin\n\n\nMixin to make a property immutable.\n\n\nImmutableStringProperty\n\n\nAn immutable version of \ngoogle.appengine.ext.db.StringProperty\n\n\nImmutablePropertyException\n\n\nRaised when someone tries to set an immutable property.", 
            "title": "immutabe_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.immutabe_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.immutabe_property/#immutablemixin", 
            "text": "Mixin to make a property immutable.", 
            "title": "ImmutableMixin"
        }, 
        {
            "location": "/docgen-api/catnado.properties.immutabe_property/#immutablestringproperty", 
            "text": "An immutable version of  google.appengine.ext.db.StringProperty", 
            "title": "ImmutableStringProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.immutabe_property/#immutablepropertyexception", 
            "text": "Raised when someone tries to set an immutable property.", 
            "title": "ImmutablePropertyException"
        }, 
        {
            "location": "/docgen-api/catnado.properties.key_property/", 
            "text": "Classes\n\n\nKeyProperty\n\n\nA property that stores a key without automatically dereferencing it or\n  requiring a dependency between model classes.\n\n\ndb.ReferenceProperty\n performs a datastore RPC when it is accessed, which\n  can lead to unforeseen performance problems.\n\n\nFurthermore, it needs to have the Kind specified when it is declared, which\n  creates a code dependency between models that can be undesirable.\n\n\nKeyProperty\n helps alleviate these concerns.\n\n\nvalidate\n\n\nArgs:\n  value: The value to validate.\nReturns:\n  A valid key.\nRaises:\n  TypeError if the value can't be converted into a `db.Key`", 
            "title": "key_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.key_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.key_property/#keyproperty", 
            "text": "A property that stores a key without automatically dereferencing it or\n  requiring a dependency between model classes.  db.ReferenceProperty  performs a datastore RPC when it is accessed, which\n  can lead to unforeseen performance problems.  Furthermore, it needs to have the Kind specified when it is declared, which\n  creates a code dependency between models that can be undesirable.  KeyProperty  helps alleviate these concerns.  validate  Args:\n  value: The value to validate.\nReturns:\n  A valid key.\nRaises:\n  TypeError if the value can't be converted into a `db.Key`", 
            "title": "KeyProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.pickle_property/", 
            "text": "Classes\n\n\nPickleProperty\n\n\nA property for storing complex objects in the datastore in pickled form.\n\n\ndefault_value\n\n\nIf possible, copy the value passed in the default= keyword argument.\n    This prevents mutable objects such as dictionaries from being shared across\n    instances.\n\n\nmake_value_from_datastore\n\n\nget_value_for_datastore", 
            "title": "pickle_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.pickle_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.pickle_property/#pickleproperty", 
            "text": "A property for storing complex objects in the datastore in pickled form.  default_value  If possible, copy the value passed in the default= keyword argument.\n    This prevents mutable objects such as dictionaries from being shared across\n    instances.  make_value_from_datastore  get_value_for_datastore", 
            "title": "PickleProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.set_property/", 
            "text": "Classes\n\n\nSetProperty\n\n\nA property that stores a set of things.\n\n\nThis is a parameterized property; the parameter must be a valid\n  non-list data type, and all items must conform to this type.\n\n\ndefault_value\n\n\nget_form_field\n\n\nmake_value_from_form\n\n\nget_value_for_form\n\n\nmake_value_from_datastore\n\n\nvalidate\n\n\nget_value_for_datastore", 
            "title": "set_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.set_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.set_property/#setproperty", 
            "text": "A property that stores a set of things.  This is a parameterized property; the parameter must be a valid\n  non-list data type, and all items must conform to this type.  default_value  get_form_field  make_value_from_form  get_value_for_form  make_value_from_datastore  validate  get_value_for_datastore", 
            "title": "SetProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test/", 
            "text": "", 
            "title": "__init__"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_decimal_property/", 
            "text": "Classes\n\n\nDecimalPropertyTestModel\n\n\nTestDecimalProperty\n\n\ntest_creation_with_string\n\n\ntest_creation_with_decimal", 
            "title": "test_decimal_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_decimal_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_decimal_property/#decimalpropertytestmodel", 
            "text": "", 
            "title": "DecimalPropertyTestModel"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_decimal_property/#testdecimalproperty", 
            "text": "test_creation_with_string  test_creation_with_decimal", 
            "title": "TestDecimalProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_immutable_property/", 
            "text": "Classes\n\n\nImmutablePropertyTestModel\n\n\nA simple model for testing \n\n\nTestImmutableProperty\n\n\ntest_immutable_property_cannot_be_changed", 
            "title": "test_immutable_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_immutable_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_immutable_property/#immutablepropertytestmodel", 
            "text": "A simple model for testing", 
            "title": "ImmutablePropertyTestModel"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_immutable_property/#testimmutableproperty", 
            "text": "test_immutable_property_cannot_be_changed", 
            "title": "TestImmutableProperty"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_imports/", 
            "text": "Classes\n\n\nCatnadoPropertyImportTest\n\n\ntest_importing_catnado_properties", 
            "title": "test_imports"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_imports/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_imports/#catnadopropertyimporttest", 
            "text": "test_importing_catnado_properties", 
            "title": "CatnadoPropertyImportTest"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_key_property/", 
            "text": "Classes\n\n\nKeyPropertyAssignmentTest\n\n\nsetUp\n\n\ntest_set_with_entity\n\n\ntest_set_with_key\n\n\nImmutableKeyPropertyTestModel", 
            "title": "test_key_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_key_property/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_key_property/#keypropertyassignmenttest", 
            "text": "setUp  test_set_with_entity  test_set_with_key", 
            "title": "KeyPropertyAssignmentTest"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.test_key_property/#immutablekeypropertytestmodel", 
            "text": "", 
            "title": "ImmutableKeyPropertyTestModel"
        }, 
        {
            "location": "/docgen-api/catnado.properties.test.testcase/", 
            "text": "", 
            "title": "testcase"
        }, 
        {
            "location": "/docgen-api/catnado.properties.transform_property/", 
            "text": "Functions\n\n\nTransformProperty\n\n\nImplements a 'transform' datastore property.\n\n\nTransformProperties are similar to DerivedProperties, but with two main\n  differences:\n  - Instead of acting on the whole model, the transform function is passed the\n    current value of a single property which was specified in the constructor.\n  - Property values are calculated when the property being derived from is set,\n    not when the TransformProperty is fetched. This is more efficient for\n    properties that have significant expense to calculate.\n\n\nTransformProperty can be declared as a regular property, passing the property\n  to operate on and a function as the first arguments, or it can be used as a\n  decorator for the function that does the calculation, with the property to\n  operate on passed as an argument.", 
            "title": "transform_property"
        }, 
        {
            "location": "/docgen-api/catnado.properties.transform_property/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/docgen-api/catnado.properties.transform_property/#transformproperty", 
            "text": "Implements a 'transform' datastore property.  TransformProperties are similar to DerivedProperties, but with two main\n  differences:\n  - Instead of acting on the whole model, the transform function is passed the\n    current value of a single property which was specified in the constructor.\n  - Property values are calculated when the property being derived from is set,\n    not when the TransformProperty is fetched. This is more efficient for\n    properties that have significant expense to calculate.  TransformProperty can be declared as a regular property, passing the property\n  to operate on and a function as the first arguments, or it can be used as a\n  decorator for the function that does the calculation, with the property to\n  operate on passed as an argument.", 
            "title": "TransformProperty"
        }, 
        {
            "location": "/docgen-api/catnado.testing/", 
            "text": "", 
            "title": "__init__"
        }, 
        {
            "location": "/docgen-api/catnado.testing.testcase/", 
            "text": "Classes\n\n\nSimpleAppEngineTestCase\n\n\ntearDown\n\n\nsetUp", 
            "title": "testcase"
        }, 
        {
            "location": "/docgen-api/catnado.testing.testcase/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.testing.testcase/#simpleappenginetestcase", 
            "text": "tearDown  setUp", 
            "title": "SimpleAppEngineTestCase"
        }, 
        {
            "location": "/docgen-api/catnado.utils/", 
            "text": "", 
            "title": "__init__"
        }, 
        {
            "location": "/docgen-api/catnado.utils.environment/", 
            "text": "Functions\n\n\nsetup_cloud_sdk_paths\n\n\nSetup Cloud SDK on \nsys.path\n.  Requires \n$APPENGINE_SDK_DIR\n be set to\n  your App Engine SDK directory at \ngoogle-cloud-sdk/platform/google_appengine\n.\n\n\nUseful for setting up tests that require App Engine stubs.", 
            "title": "environment"
        }, 
        {
            "location": "/docgen-api/catnado.utils.environment/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/docgen-api/catnado.utils.environment/#setup_cloud_sdk_paths", 
            "text": "Setup Cloud SDK on  sys.path .  Requires  $APPENGINE_SDK_DIR  be set to\n  your App Engine SDK directory at  google-cloud-sdk/platform/google_appengine .  Useful for setting up tests that require App Engine stubs.", 
            "title": "setup_cloud_sdk_paths"
        }, 
        {
            "location": "/docgen-api/catnado.versionedmodel/", 
            "text": "Attributes\n\n\nEVENT_TYPE_CHANGED_ACTIVE_VERSION\n\n\nERROR_WRONG_VERSION_PARENT\n\n\nERROR_WRONG_PARENT_TYPE\n\n\nERROR_MISSING_VERSION_UNIFIER\n\n\nEVENT_DATA_OLD_ACTIVE_VERSION\n\n\nEVENT_KEY\n\n\nEVENT_DATA_TIMESTAMP\n\n\nEVENT_DATA_NEW_ACTIVE_VERSION\n\n\nClasses\n\n\nVersionUnifier\n\n\nCommon datastore ancestor for every version of a versioned model.\n  Authoritative source of which version is active.\n\n\ninner_wrapper\n\n\nVersionedModel\n\n\nModel with built-in versioning. Each entity represents a single version\n  and all versions share a common \nVersionUnifier\n datastore parent.\n\n\nparent\n\n\nGet this entity's feaux datastore parent (as opposed to its real parent\n    which is a \nVersionUnifier\n).\n\n\nReturns:\n  Datastore entity.\nRaises:\n  The entity is loaded using `google.appengine.ext.db.get` which can raise\n  exceptions (`KindError`?) if the Parent's Kind is not imported.\nRPC Cost:\n  2x fetch-by-key if parent is `VersionedModel` descendant\n  1x fetch-by-key otherwise\n\n\n\nall_versions\n\n\nGet a query that will fetch all of the versions of the given instance of\n    VersionedModel, ordered by their ascending creation date.\n\n\nArgs:\n  instance: Any instance of any `VersionedModel` subclass.\nReturns:\n  google.appengine.ext.db.Query\n\n\n\nput\n\n\nPut a new version of this model to the datastore. Iff this is a new\n    model, create a new \nVersionUnifier\n to track all of its versions.\n    Args:\n      Keyword args passed to super call\n    Returns:\n      \ndb.Key\n for the newly-put version\n\n\nparent_key\n\n\nSee: \nparent\n.\n\n\nReturns:\n  The `db.Key` of this entity's feaux parent.\nRPC Cost:\n  1x fetch-by-key if parent is `VersionedModel` descendant\n  Free otherwise\n\n\n\nset_active\n\n\nTransactionally activate this version.\n\n\nArgs:\n  info: optional `dict` of info to record with the change", 
            "title": "__init__"
        }, 
        {
            "location": "/docgen-api/catnado.versionedmodel/#attributes", 
            "text": "EVENT_TYPE_CHANGED_ACTIVE_VERSION  ERROR_WRONG_VERSION_PARENT  ERROR_WRONG_PARENT_TYPE  ERROR_MISSING_VERSION_UNIFIER  EVENT_DATA_OLD_ACTIVE_VERSION  EVENT_KEY  EVENT_DATA_TIMESTAMP  EVENT_DATA_NEW_ACTIVE_VERSION", 
            "title": "Attributes"
        }, 
        {
            "location": "/docgen-api/catnado.versionedmodel/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.versionedmodel/#versionunifier", 
            "text": "Common datastore ancestor for every version of a versioned model.\n  Authoritative source of which version is active.  inner_wrapper", 
            "title": "VersionUnifier"
        }, 
        {
            "location": "/docgen-api/catnado.versionedmodel/#versionedmodel", 
            "text": "Model with built-in versioning. Each entity represents a single version\n  and all versions share a common  VersionUnifier  datastore parent.  parent  Get this entity's feaux datastore parent (as opposed to its real parent\n    which is a  VersionUnifier ).  Returns:\n  Datastore entity.\nRaises:\n  The entity is loaded using `google.appengine.ext.db.get` which can raise\n  exceptions (`KindError`?) if the Parent's Kind is not imported.\nRPC Cost:\n  2x fetch-by-key if parent is `VersionedModel` descendant\n  1x fetch-by-key otherwise  all_versions  Get a query that will fetch all of the versions of the given instance of\n    VersionedModel, ordered by their ascending creation date.  Args:\n  instance: Any instance of any `VersionedModel` subclass.\nReturns:\n  google.appengine.ext.db.Query  put  Put a new version of this model to the datastore. Iff this is a new\n    model, create a new  VersionUnifier  to track all of its versions.\n    Args:\n      Keyword args passed to super call\n    Returns:\n       db.Key  for the newly-put version  parent_key  See:  parent .  Returns:\n  The `db.Key` of this entity's feaux parent.\nRPC Cost:\n  1x fetch-by-key if parent is `VersionedModel` descendant\n  Free otherwise  set_active  Transactionally activate this version.  Args:\n  info: optional `dict` of info to record with the change", 
            "title": "VersionedModel"
        }, 
        {
            "location": "/docgen-api/catnado.versionedmodel.test_versionedmodel/", 
            "text": "Classes\n\n\nTestVersionedModelVersions\n\n\ntest_putting_new_version\n\n\ntest_creating_first_version\n\n\nThe first version should create a \nVersionUnifier\n to act as parent\n    for all versions and automatically be set active. \n\n\ntest_private_put_doesnt_save_new_version\n\n\nTestVersionedModelParents\n\n\ntest_creating_versioned_model_with_parent_entity_or_key\n\n\nCreate datastore relationships using \nparent\n kwarg, access the feaux\n    parent through parent() or parent_key() \n\n\ntest_versioned_model_parent_always_returns_active_version\n\n\nTestVersionedModelQueries\n\n\ntest_query_only_returns_active_version\n\n\ntest_all_versions_query\n\n\nSimpleEntity\n\n\nA simple versioned model for testing.", 
            "title": "test_versionedmodel"
        }, 
        {
            "location": "/docgen-api/catnado.versionedmodel.test_versionedmodel/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/docgen-api/catnado.versionedmodel.test_versionedmodel/#testversionedmodelversions", 
            "text": "test_putting_new_version  test_creating_first_version  The first version should create a  VersionUnifier  to act as parent\n    for all versions and automatically be set active.   test_private_put_doesnt_save_new_version", 
            "title": "TestVersionedModelVersions"
        }, 
        {
            "location": "/docgen-api/catnado.versionedmodel.test_versionedmodel/#testversionedmodelparents", 
            "text": "test_creating_versioned_model_with_parent_entity_or_key  Create datastore relationships using  parent  kwarg, access the feaux\n    parent through parent() or parent_key()   test_versioned_model_parent_always_returns_active_version", 
            "title": "TestVersionedModelParents"
        }, 
        {
            "location": "/docgen-api/catnado.versionedmodel.test_versionedmodel/#testversionedmodelqueries", 
            "text": "test_query_only_returns_active_version  test_all_versions_query", 
            "title": "TestVersionedModelQueries"
        }, 
        {
            "location": "/docgen-api/catnado.versionedmodel.test_versionedmodel/#simpleentity", 
            "text": "A simple versioned model for testing.", 
            "title": "SimpleEntity"
        }
    ]
}